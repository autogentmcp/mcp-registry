generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  role         String        @default("USER")
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  apiKeys      ApiKey[]
  applications Application[]

  @@map("users")
}

model Application {
  id                   String           @id @default(cuid())
  name                 String
  description          String?
  appKey               String           @unique
  status               String           @default("ACTIVE")
  authenticationMethod String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  userId               String
  healthCheckUrl       String?
  consecutiveFailures  Int              @default(0)
  consecutiveSuccesses Int              @default(0)
  healthStatus         String           @default("UNKNOWN")
  lastHealthCheckAt    DateTime?
  apiKeys              ApiKey[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLogs            AuditLog[]
  endpoints            Endpoint[]
  environments         Environment[]
  healthCheckLogs      HealthCheckLog[]

  @@map("applications")
}

model Environment {
  id                String               @id @default(cuid())
  name              String
  description       String?
  status            String               @default("ACTIVE")
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  applicationId     String
  baseDomain        String?
  healthStatus      String               @default("UNKNOWN")
  lastHealthCheckAt DateTime?
  apiKeys           ApiKey[]
  endpoints         Endpoint[]
  security          EnvironmentSecurity?
  application       Application          @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  healthCheckLogs   HealthCheckLog[]

  @@unique([applicationId, name])
  @@map("environments")
}

model ApiKey {
  id            String      @id @default(cuid())
  name          String
  token         String      @unique
  status        String      @default("ACTIVE")
  expiresAt     DateTime?
  lastUsed      DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  applicationId String
  environmentId String
  userId        String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Endpoint {
  id            String       @id @default(cuid())
  name          String
  path          String
  method        String
  description   String?
  isPublic      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  applicationId String
  environmentId String?
  pathParams    Json?
  queryParams   Json?
  requestBody   Json?
  responseBody  Json?
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment   Environment? @relation(fields: [environmentId], references: [id])

  @@unique([applicationId, environmentId, path, method])
  @@map("endpoints")
}

model AuditLog {
  id            String       @id @default(cuid())
  action        String
  details       String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime     @default(now())
  applicationId String?
  application   Application? @relation(fields: [applicationId], references: [id])

  @@map("audit_logs")
}

model EnvironmentSecurity {
  id                String      @id @default(cuid())
  environmentId     String      @unique
  rateLimitEnabled  Boolean     @default(false)
  rateLimitRequests Int?
  rateLimitWindow   Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  vaultKey          String?
  environment       Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("environment_security")
}

model HealthCheckLog {
  id                   String       @id @default(cuid())
  applicationId        String
  environmentId        String?
  status               String
  statusCode           Int?
  responseTime         Float?
  message              String?
  consecutiveFailures  Int          @default(0)
  consecutiveSuccesses Int          @default(0)
  createdAt            DateTime     @default(now())
  application          Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  environment          Environment? @relation(fields: [environmentId], references: [id])

  @@map("health_check_logs")
}
